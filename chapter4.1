---
title: "chapter4.1"
output: html_document
---
```{r exercise 4.1}
customerExperience <- c('very happy','very happy','satisfied','satisfied','satisfied','very happy','bad','bad','satisfied','satisfied','bad','happy','happy','very happy','happy','happy','satisfied','very happy','very happy','satisfied','satisfied','very happy','satisfied','bad','very happy','very bad','very happy','bad','bad','very bad')
customerExperience_fct = factor(customerExperience)
customerExperience_fct_factor_order <- factor(customerExperience,levels = c("very bad","bad","satisfied","happy","vey happy"),ordered = T)
```

```{r}exercise 4.2
subsidiaries <- list()
subsidiaries$boston <- c("2020 Oct. 13 15:00:00", "2019 Apr. 10 09:30:00") # boston time zone
subsidiaries$mykonos <- c("14 Jan., 2021 03:27:00", "8 Aug., 2020 11:20:00") # mykonos time zone
one_subsidiaries <- lubridate::ymd_hms(subsidiaries$boston,tz = "Asia/Dacca")
another_subsidiaries <- lubridate::dmy_hms(subsidiaries$mykonos,tz = "Asia/Dacca")
c(one_subsidiaries,another_subsidiaries) -> sum_subsidiaries
lubridate::with_tz(
  sum_subsidiaries ,
  tz = "Asia/Dacca"
) -> final_answer
```


```{r} 
# exercise 4.5
participations <- 
list('session 3',c("session 1", "session 2", "session 3"),'session 3',c("session 2", "session 1"),c("session 3", "session 1"),c("session 3", "session 2", "session 1"),'session 2','session 1',c("session 2", "session 1", "session 3"),c("session 3", "session 1", "session 2"))
participations1 <- unlist(participations)
table(participations1)
```

```{r}
my_feature_different_from_other <- list(
  "height" = list(181,191,201),
  "weight" = 70,
  "face" = "handsome"
)# binding+regular name + element name + attibute +name call
```


```{r}
example1 <- c("John", "Mary", "Bill")
# goal (a,b,c,d,e,) adding two people in the list
example1 [[4]] <- "Kevin"
example1[[5]] <- "Tim"
example1[c(4,5)] <- c("Kevin","Tim")
example1
```
```{r}
example3 <- c("John", "Mary", "Bill", person4="Jack")

## inclusive approach
example3[c(1, 2, 3)]

## exclusive approach
example3[-c(4)]

## multiple exclusion is possible
example3[-c(1, 4)] # negative sign can only use on the numaric cannot use on character
```


```{r}
example1 <- c("John", "Mary", "Bill")
# binding the element value with the element name that means the object with the element name won't add the new element name but will increase the element value 
# if we have to increase the 'element name we need to retrieve the position out and give it element name and value like the underneath example 
# so if we need to increase name and value the name haveto be with retrieval side
example1 [[4]] <- "person4" 
example1
```
```{r}
1:3 # the same as # : 2is mean 遞增or遞減
seq(from=1, to=3, by=1) # from 1 to 3 increase by 1 # seq 等差遞增or遞減  
```


```{r}
# retrieve an non-existing element name "person4"
# example value become => (j,m,b,k) adding ken at position 4
example1[[4]] <- "Ken" # can use element name to replace the position 4
example1[["person4"]] <- "Ken"
# retrieve two non-existing element positions
```


```{r}
numeric
# declaration means bind a name with no value but its value type ==>adding value in this declaration(an empty object)
```

```{r}
course1 <- 
  list(
    name="programming for data science",
    credit=2
  )
```


# there is a special method to remove in list  that there are not in other methods 
# the method is null(with capital letter) bind with the value name 


```{r}
#[row , col] an extraction from data frame and the structure of the retrieval value = the source structure 
# also can replace the value but the structure of the  replacement value need to be the same as the source (object)
```

# as function can convert the class object also can turn atomic vector into unlist 
# unlist() function 能使 lsit 變為 atomic vector
# r 獨特之功能 能接受向量直接運算 
# print 輸出結果
# sum 總和
# which apply to only the logical vector can tell the position of true
# [] can use logical vector to pick your value [T] 要選 [F] 不要選
# as numeric(datetime or factor) will show hoe R stores these values
#{} programming block can execute the command in the block 可以呈現出演算邏輯 
# saveRDS(object_nmae,file:"filename.RDS")
```{r} 


```{r}
#exercise 4.6
factor(c('參','貮','貮','貮','壹','貮','參','貮','參','參'), levels=c('壹','貮','參')) -> number1
class(number1)
typeof(number1)
as.numeric (number1) -> number2
sum(number2)
```

```{r}
# exercise 4.7
factor(c('۶','۹','۸','۹','۶','۸','۸','۵','۹','۹'),levels = c("۵", "۶", "۷", "۸", "۹")) -> fct1
as.numeric (fct1) -> conversion
sum(conversion) -> answer
```

# grade 代表從哪裡選取標的(retrieve from)
# [pick] 選取標的的條件

```{r}
grades <- c(51,70,79,78,67,74,80)
# same 7 student's gender
gender <- c('female','female','male','male','female','male','male')
pick <- grades > 70
gender[pick]
```

```{r}
dataSet1 <- 
  data.frame(
    school_id = c("001", "002", "003", "004"),
    course1_grade=c(55, 83, 92, 73),
    course2_grade=c(50, 88, 72, 77)
  )
```

```{r}
pick <- dataSet1$course1_grade >=80 # conditional retrieval means when the value meets the command(condition) the R would retrieve the value 
dataSet1[[3]][pick] 
```
```{r}
names(dataSet1)
```
```{r}
dataSet1[pick, ] # will keep all the columns in dataSet1
# same as
subset(dataSet1 , course1_grade >=80)
```

```{r}
gender = c('Female','Male','Male', 'Female')
age = c(28,41,42,33)
residence = c('South','South','North', 'North')
color=c("yellow", "pink", "blue", "green")
```

```{r}
# For those who are "Male": 
pick$male <- gender == "Male"
print(pick$male)

# For those who lives in the "South:
pick$south <- residence == "South"
print(pick$south)
```

```{r}
# For those who are "Male" 
#   AND
#   lives in the "South",
pick$male_south <- 
  pick$male & pick$south

print(pick$male_south)

# what are their ages?
age[pick$male_south]
```



```{r}
pick$maleXOsouth <-
  xor(pick$male, pick$south)

print(pick$maleXOsouth)
```

```{r}
color[pick$male]
color[pick$south]
color[pick$maleOsouth]
color[pick$maleXOsouth]
```



```{r}
# For those who are "Male" 
#   OR
#   lives in the "South",
pick$maleOsouth <- 
  pick$male | pick$south

print(pick$maleOsouth)

# what are their ages?
age[pick$maleOsouth]
```





